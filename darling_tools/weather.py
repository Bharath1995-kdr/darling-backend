
import os
import requests
from dotenv import load_dotenv

load_dotenv()

async def get_weather(city: str = "Bangalore") -> str:
    # Use consistent API key name
    api_key = os.getenv("OPENWEATHER_API_KEY") or os.getenv("OPENWEATHER_API")
    
    if not api_key:
        return "‚ùå OpenWeather API key ‡≤∏‡≤ø‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤!"
    
    url = f"https://api.openweathermap.org/data/2.5/weather"
    params = {"q": city, "appid": api_key, "units": "metric"}
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if data.get("cod") != 200:
            return f"‚ùå {city}‡≤ó‡≥Ü ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤∏‡≤ø‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤: {data.get('message', '')}"
        
        if "main" not in data or "weather" not in data:
            return "‚ùå ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø incomplete ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥Ü üò¢"
        
        temp = data["main"]["temp"]
        feels_like = data["main"].get("feels_like", temp)
        desc = data["weather"][0]["description"]
        humidity = data["main"].get("humidity", "N/A")
        
        return (f"üå§Ô∏è {city}‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®:\n"
                f"- ‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø: {desc}\n"
                f"- ‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®: {temp}¬∞C (feels like {feels_like}¬∞C)\n"
                f"- ‡≤Ü‡≤∞‡≥ç‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü: {humidity}%")
    
    except requests.exceptions.Timeout:
        return "‚ùå ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® service timeout ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø."
    except requests.exceptions.RequestException as e:
        return f"‚ùå ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® service error: {str(e)}"
    except KeyError as e:
        return f"‚ùå ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® data format error: {str(e)}"
    except Exception as e:
        return f"‚ùå ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤™‡≤°‡≥Ü‡≤Ø‡≥ã‡≤ï‡≥Ü ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤ üòû: {str(e)}"
